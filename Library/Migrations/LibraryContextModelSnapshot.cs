// <auto-generated />
using Library.Classes;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Library.Migrations
{
    [DbContext(typeof(LibraryContext))]
    partial class LibraryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.31")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Library.Classes.Account", b =>
                {
                    b.Property<int>("Account_number")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Date_opened")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("History")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("account_State")
                        .HasColumnType("int");

                    b.Property<int>("libraryID")
                        .HasColumnType("int");

                    b.Property<int>("patronID")
                        .HasColumnType("int");

                    b.HasKey("Account_number");

                    b.HasIndex("libraryID");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Library.Classes.Author", b =>
                {
                    b.Property<int>("Author_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Author_biography")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Authour_Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Author_ID");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("Library.Classes.Basic_Classes.Library_Class", b =>
                {
                    b.Property<int>("Library_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Library_ID");

                    b.ToTable("Libraries");
                });

            modelBuilder.Entity("Library.Classes.Book", b =>
                {
                    b.Property<int>("ISBN")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number_of_pages")
                        .HasColumnType("int");

                    b.Property<string>("Publication_data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Publisher")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ISBN");

                    b.ToTable("Books");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Book");
                });

            modelBuilder.Entity("Library.Classes.BookAuthor", b =>
                {
                    b.Property<int>("ISBN")
                        .HasColumnType("int");

                    b.Property<int>("Author_Id")
                        .HasColumnType("int");

                    b.HasKey("ISBN", "Author_Id");

                    b.HasIndex("Author_Id");

                    b.ToTable("BookAuthors");
                });

            modelBuilder.Entity("Library.Classes.Catalog", b =>
                {
                    b.Property<int>("CatalogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Catalog_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("libraryID")
                        .HasColumnType("int");

                    b.HasKey("CatalogID");

                    b.HasIndex("libraryID");

                    b.ToTable("Catalogs");
                });

            modelBuilder.Entity("Library.Classes.Librarian", b =>
                {
                    b.Property<int>("Librarian_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Librarian_ID");

                    b.ToTable("Librarians");
                });

            modelBuilder.Entity("Library.Classes.Patron", b =>
                {
                    b.Property<int>("Patron_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Accountnumber")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Patron_ID");

                    b.HasIndex("Accountnumber")
                        .IsUnique();

                    b.ToTable("Patrons");
                });

            modelBuilder.Entity("Library.Classes.Book_Item", b =>
                {
                    b.HasBaseType("Library.Classes.Book");

                    b.Property<int>("AccountID")
                        .HasColumnType("int");

                    b.Property<string>("BarCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CatalogID")
                        .HasColumnType("int");

                    b.Property<bool>("IsReferenceOnly")
                        .HasColumnType("bit");

                    b.Property<int>("Tag")
                        .HasColumnType("int");

                    b.Property<int>("librarianID")
                        .HasColumnType("int");

                    b.Property<int>("libraryID")
                        .HasColumnType("int");

                    b.HasIndex("AccountID");

                    b.HasIndex("CatalogID");

                    b.HasIndex("librarianID");

                    b.HasIndex("libraryID");

                    b.HasDiscriminator().HasValue("Book_Item");
                });

            modelBuilder.Entity("Library.Classes.Account", b =>
                {
                    b.HasOne("Library.Classes.Basic_Classes.Library_Class", "Library")
                        .WithMany("Accounts")
                        .HasForeignKey("libraryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Library.Classes.BookAuthor", b =>
                {
                    b.HasOne("Library.Classes.Author", "Author")
                        .WithMany("BookAuthors")
                        .HasForeignKey("Author_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.Classes.Book", "Book")
                        .WithMany("BookAuthors")
                        .HasForeignKey("ISBN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Library.Classes.Catalog", b =>
                {
                    b.HasOne("Library.Classes.Basic_Classes.Library_Class", "library")
                        .WithMany("Catalogs")
                        .HasForeignKey("libraryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Library.Classes.Patron", b =>
                {
                    b.HasOne("Library.Classes.Account", "Account")
                        .WithOne("Patron")
                        .HasForeignKey("Library.Classes.Patron", "Accountnumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Library.Classes.Book_Item", b =>
                {
                    b.HasOne("Library.Classes.Account", "Account")
                        .WithMany("Book_Items")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.Classes.Catalog", "Catalog")
                        .WithMany("Book_Items")
                        .HasForeignKey("CatalogID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.Classes.Librarian", "Librarian")
                        .WithMany("Book_Items")
                        .HasForeignKey("librarianID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.Classes.Basic_Classes.Library_Class", "Library")
                        .WithMany("Book_Items")
                        .HasForeignKey("libraryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
